#ifndef ZERROR_MIN_CPP
#define ZERROR_MIN_CPP
#include <stdint.h>


#include "zerror_min.h"
#ifdef __DEPRECATED__
#include <ztoolset/zmodulestack.h>
#endif

/** @addtogroup ZBSOptions Setting Options for runtime
 * We can set on or off options in order to change runtime behavior of product
@{
*/

/**
 * @brief setVerbose Set the option ZVerbose with the appropriate mask made from ZVerbose_type enum
 *  According ZVerbose option mask set, a lot a explaining text is displayed to stdout during program execution.
 */
/*  deprecated : see ZBaseParameters
void setVerbose(ZVerbose_Base pVerbose) {ZVerbose=pVerbose;
                                        return;}
void addVerbose(ZVerbose_Base pVerbose) {ZVerbose |= pVerbose;
                                        return;}
void clearVerbose(ZVerbose_Base pVerbose){ZVerbose &= ~pVerbose;
                                         return;}
*/





/** @} */
/*
 * ================POSIX Signals description / value===========================================
 */

const char *ZSignal_Description[][2]
{
{"SIGHUP" ,	"Hangup (POSIX):report the termination of the controlling process.Not available for Windows platform."},
{"SIGINT" ,	"Interrupt (ANSI) Program interrupt. (ctrl-c)"},
{"SIGQUIT" , "Quit (POSIX) Terminate process and generate core dump.Not available for Windows platform."},
{"SIGILL" ,	"Illegal Instruction (ANSI) Executable file is corrupted or use of data where a pointer to a function was expected."},
{"SIGTRAP" , "Trace trap (POSIX).Not available for Windows platform."},
#ifdef __USE_WINDOWS__
{"SIGABRT_COMPAT","Windows: compatible Abort signal (ANSI)-IOT trap (4.2 BSD)Process detects error and reports by calling abort"},
#else
{"SIGABRT-SIGIOT","Abort (ANSI)-IOT trap (4.2 BSD)Process detects error and reports by calling abort"},
#endif // __USE_WINDOWS__
{"SIGBUS" , "	BUS error (4.2 BSD) Access to an invalid address.Not available for Windows platform."},
{"SIGFPE" ,	"Floating-Point arithmetic Exception (ANSI).This includes division by zero and overflow.Floating-Point Arithmetic exception."},
{"SIGKILL" , "Kill, unblockable (POSIX).Immediate program termination.Can not be handled, blocked or ignored.Not available for Windows platform."},
{"SIGUSR1" , "User-defined signal 1.Not available for Windows platform."},
{"SIGSEGV" , "Segmentation Violation (ANSI)Occurs when a program tries to read or write outside the memory that is allocated for it by the operating system, dereferencing a bad or NULL pointer. Indicates an invalid access to valid memory."},
{"SIGUSR2" , "User-defined signal 2.Not available for Windows platform."},
{"SIGPIPE" , "Broken pipe (POSIX).Trying to write to a socket which is not connected.Not available for Windows platform."},
{"SIGALRM" , "Alarm clock (POSIX)Indicates expiration of a timer. Used by the alarm() function.Not available for Windows platform."},
{"SIGTERM" , "Termination (ANSI).This signal can be blocked, handled, and ignored. Generated by \"kill\" command."},
{"SIGSTKFLT" , "Stack fault.Not available for Windows platform."},
{"SIGCHLD-SIGCLD" , "Child status has changed (POSIX)Signal sent to parent process whenever one of its child processes terminates or stops.Not available for Windows platform."},
{"SIGCONT" , "Continue (POSIX) Signal sent to process to make it continue.Not available for Windows platform."},
{"SIGSTOP" , "Stop, unblockable (POSIX) Stop a process. This signal cannot be handled, ignored, or blocked.Not available for Windows platform."},
{"SIGTSTP" , "Keyboard stop (POSIX) Interactive stop signal. This signal can be handled and ignored. (ctrl-z).Not available for Windows platform."},
#ifdef __USE_WINDOWS__
{"SIGBREAK" , "Windows:Ctrl-Break sequence."},
{"SIGABRT" , "Windows:Abnornal termination triggered by abort call."},
#else
{"SIGTTIN" , "SIGTTIN:Background read from tty.(Used by windows under another meaning)"},
{"SIGTTOU" , "POSIX:Background write to tty (Used by windows under another meaning)"},
#endif //__USE_WINDOWS__
{"SIGURG" , "Urgent condition on socket (4.2 BSD).Signal sent when \"urgent\" or out-of-band data arrives on a socket.Not available for Windows platform."},
{"SIGXCPU" , "CPU limit exceeded (4.2 BSD).Not available for Windows platform."},
{"SIGXFSZ" , "File size limit exceeded (4.2 BSD).Not available for Windows platform."},
{"SIGVTALRM" , "Virtual Time Alarm (4.2 BSD) Expiration of a timer.Not available for Windows platform."},
{"SIGPROF" , "Profiling alarm clock (4.2 BSD) Expiration of a timer. Use for code profiling facilities.Not available for Windows platform."},
{"SIGWINCH" , "Window size change (4.3 BSD, Sun).Not available for Windows platform."},
{ "SIGIO-SIGPOLL" , "I/O now possible (4.2 BSD)Pollable event occurred (System V)Signal sent when file descriptor is ready to perform I/O (generated by sockets).Not available for Windows platform."},
{"SIGPWR" , "Power failure restart (System V).Not available for Windows platform."},
{"SIGSYS" , "Bad system call.Not available for Windows platform."}
};

POSIXerr_struct ZErrno []
{
   { "EPERM" ,           EPERM       },  /* Operation not permitted */
   { "ENOENT" ,          ENOENT       },  /* No such file or directory */
   { "ESRCH"  ,          3       },  /* No such process */
   { "EINTR" ,           4       },  /* Interrupted system call */
   { "EIO"  ,            5       },  /* I/O error */
   { "ENXIO" ,           6       },  /* No such device or address */
   { "E2BIG" ,           7       },  /* Arg list too long */
   { "ENOEXEC" ,         8       },  /* Exec format error */
   { "EBADF" ,           9       },  /* Bad file number */
   { "ECHILD" ,         10       },  /* No child processes */
   { "EAGAIN" ,         11       },  /* Try again *//*also  EWOULDBLOCK Operation would block */
   { "ENOMEM" ,         12       },  /* Out of memory */
   { "EACCES"  ,        13       },  /* Permission denied */
   { "EFAULT"  ,        14       },  /* Bad address */
   { "ENOTBLK",         15       },  /* Block device required */
   { "EBUSY" ,          16       },  /* Device or resource busy */
   { "EEXIST" ,         17       },  /* File exists */
   { "EXDEV" ,          18       },  /* Cross-device link */
   { "ENODEV" ,         19       },  /* No such device */
   { "ENOTDIR" ,        20       },  /* Not a directory */
   { "EISDIR"  ,        21       },  /* Is a directory */
   { "EINVAL" ,         22       },  /* Invalid argument */
   { "ENFILE"  ,        23       },  /* File table overflow */
   { "EMFILE" ,        24       },  /* Too many open files */
   { "ENOTTY" ,         25       },  /* Not a typewriter */
   { "ETXTBSY" ,        26       },  /* Text file busy */
   { "EFBIG" ,          27       },  /* File too large */
   { "ENOSPC" ,         28       },  /* No space left on device */
   { "ESPIPE" ,         29       },  /* Illegal seek */
   { "EROFS" ,          30       },  /* Read-only file system */
   { "EMLINK" ,         31       },  /* Too many links */
   { "EPIPE"  ,         32       },  /* Broken pipe */
   { "EDOM"   ,         33       },  /* Math argument out of domain of func */
   { "ERANGE" ,         34       },  /* Math result not representable */
   { "EDEADLK" ,        35       },  /* Resource deadlock would occur */


  {  "EDEADLK"	,	35	},/* Resource deadlock would occur */
   {     "ENAMETOOLONG",	36	},/* File name too long */
       {	"ENOLCK",		37	 },  /* No record locks available */
       {	"ENOSYS",		38	 },  /* Function not implemented */
       {	"ENOTEMPTY",	39	 },  /* Directory not empty */
       {	"ELOOP"	,	40	 },  /* Too many symbolic links encountered */
       {	"EAGAIN",	41 	 },
       {	"ENOMSG",		42	 },  /* No message of desired type */
       {	"EIDRM"	,	43	 },  /* Identifier removed */
       {	"ECHRNG",		44	 },  /* Channel number out of range */
       {	"EL2NSYNC",	45	 },  /* Level 2 not synchronized */
       {	"EL3HLT",		46	 },  /* Level 3 halted */
       {	"EL3RST",		47	 },  /* Level 3 reset */
       {	"ELNRNG",		48	 },  /* Link number out of range */
       {	"EUNATCH",		49	 },  /* Protocol driver not attached */
       {	"ENOCSI",		50	 },  /* No CSI structure available */
       {	"EL2HLT",		51	 },  /* Level 2 halted */
       {	"EBADE",		52	 },  /* Invalid exchange */
       {	"EBADR"	,	53	 },  /* Invalid request descriptor */
       {	"EXFULL",		54	 },  /* Exchange full */
       {	"ENOANO",		55	 },  /* No anode */
       {	"EBADRQC",		56	 },  /* Invalid request code */
       {	"EBADSLT",		57	 },  /* Invalid slot */

       {	"EDEADLOCK"	,   58 },

       {	"EBFONT",		59	 },  /* Bad font file format */
       {	"ENOSTR",		60	 },  /* Device not a stream */
       {	"ENODATA",		61	 },  /* No data available */
       {	"ETIME"	,	62	 },  /* Timer expired */
       {	"ENOSR"	,	63	 },  /* Out of streams resources */
       {	"ENONET",		64	 },  /* Machine is not on the network */
       {	"ENOPKG",		65	 },  /* Package not installed */
       {	"EREMOTE",		66	 },  /* Object is remote */
       {	"ENOLINK",		67	 },  /* Link has been severed */
       {	"EADV",		68	 },  /* Advertise error */
       {	"ESRMNT",		69	 },  /* Srmount error */
       {	"ECOMM"	,	70	 },  /* Communication error on send */
       {	"EPROTO",		71	 },  /* Protocol error */
       {	"EMULTIHOP"	,72	 },  /* Multihop attempted */
       {	"EDOTDOT",		73	 },  /* RFS specific error */
       {	"EBADMSG",		74	 },  /* Not a data message */
       {	"EOVERFLOW"	,75	 },  /* Value too large for defined data type */
       {	"ENOTUNIQ",	76	 },  /* Name not unique on network */
       {	"EBADFD",		77	 },  /* File descriptor in bad state */
       {	"EREMCHG",		78	 },  /* Remote address changed */
       {	"ELIBACC",		79	 },  /* Can not access a needed shared library */
       {	"ELIBBAD",		80	 },  /* Accessing a corrupted shared library */
       {	"ELIBSCN",		81	 },  /* .lib section in a.out corrupted */
       {	"ELIBMAX",		82	 },  /* Attempting to link in too many shared libraries */
       {	"ELIBEXEC",	83	 },  /* Cannot exec a shared library directly */
       {	"EILSEQ",		84	 },  /* Illegal byte sequence */
       {	"ERESTART",	85	 },  /* Interrupted system call should be restarted */
       {	"ESTRPIPE",	86	 },  /* Streams pipe error */
       {	"EUSERS",		87	 },  /* Too many users */
       {	"ENOTSOCK",	88	 },  /* Socket operation on non-socket */
       {	"EDESTADDRREQ",	89	 },  /* Destination address required */
       {	"EMSGSIZE",	90	 },  /* Message too long */
       {	"EPROTOTYPE",	91	 },  /* Protocol wrong type for socket */
       {	"ENOPROTOOPT",	92	 },  /* Protocol not available */
       {	"EPROTONOSUPPORT",	93	 },  /* Protocol not supported */
       {	"ESOCKTNOSUPPORT",	94	 },  /* Socket type not supported */
       {	"EOPNOTSUPP",	95	 },  /* Operation not supported on transport endpoint */
       {	"EPFNOSUPPORT",	96	 },  /* Protocol family not supported */
       {	"EAFNOSUPPORT",	97	 },  /* Address family not supported by protocol */
       {	"EADDRINUSE",	98	 },  /* Address already in use */
       {	"EADDRNOTAVAIL"	,99	 },  /* Cannot assign requested address */
       {	"ENETDOWN",	100	 },  /* Network is down */
       {	"ENETUNREACH",	101	 },  /* Network is unreachable */
       {	"ENETRESET",	102	 },  /* Network dropped connection because of reset */
       {	"ECONNABORTED",	103	 },  /* Software caused connection abort */
       {	"ECONNRESET",	104	 },  /* Connection reset by peer */
       {	"ENOBUFS",		105	 },  /* No buffer space available */
       {	"EISCONN",		106	 },  /* Transport endpoint is already connected */
       {	"ENOTCONN",	107	 },  /* Transport endpoint is not connected */
       {	"ESHUTDOWN",	108	 },  /* Cannot send after transport endpoint shutdown */
       {	"ETOOMANYREFS",	109	 },  /* Too many references: cannot splice */
       {	"ETIMEDOUT",	110	 },  /* Connection timed out */
       {	"ECONNREFUSED",	111	 },  /* Connection refused */
       {	"EHOSTDOWN",	112	 },  /* Host is down */
       {	"EHOSTUNREACH",	113	 },  /* No route to host */
       {	"EALREADY",	114	 },  /* Operation already in progress */
       {	"EINPROGRESS",	115	 },  /* Operation now in progress */
       {	"ESTALE",		116	 },  /* Stale file handle */
       {	"EUCLEAN",		117	 },  /* Structure needs cleaning */
       {	"ENOTNAM",		118	 },  /* Not a XENIX named type file */
       {	"ENAVAIL",		119	 },  /* No XENIX semaphores available */
       {	"EISNAM",		120	 },  /* Is a named type file */
       {	"EREMOTEIO",	121	 },  /* Remote I/O error */
       {	"EDQUOT",		122	 },  /* Quota exceeded */

       {	"ENOMEDIUM",	123	 },  /* No medium found */
       {	"EMEDIUMTYPE",	124	 },  /* Wrong medium type */
       {	"ECANCELED",	125	 },  /* Operation Canceled */
       {	"ENOKEY",		126	 },  /* Required key not available */
       {	"EKEYEXPIRED",	127	 },  /* Key has expired */
       {	"EKEYREVOKED",	128	 },  /* Key has been revoked */
       {	"EKEYREJECTED",	129	 },  /* Key was rejected by service */

    /* for robust mutexes */
       {	"EOWNERDEAD",	130	 },  /* Owner died */
       {	"ENOTRECOVERABLE",	131	 },  /* State not recoverable */

       { "ERFKILL",		132	 },  /* Operation not possible due to RF-kill */

       { "EHWPOISON",	133	 }  /* Memory page has hardware error */

};// ZErrno

const char * decode_POSIXerrno(int pErrno)
{
  if (pErrno < 1)
        return "";
  if (pErrno > 133)
        return "UNKNOWN POSIX errno";
  return (ZErrno[pErrno-1].Str);
}


#include <signal.h>

const char* decode_Signal(int pSignal)
{
    if ((pSignal>31)||(pSignal<1))
            return ("Signal Unknown");
    return (ZSignal_Description[pSignal-1][0]);
}
const char* decode_SignalLib(int pSignal)
{
    if ((pSignal>31)||(pSignal<1))
            return ("Signal Unknown");
    return (ZSignal_Description[pSignal-1][1]);
}



#endif // ZERROR_MIN_CPP
